name: Build and Deploy to EKS
on: [push, workflow_dispatch]

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'eu-west-1' }}
  EKS_NAMESPACE: backend-app

permissions:
  contents: read
  id-token: write  # Required for OIDC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Pull code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      # Verify AWS setup
      - name: Verify AWS configuration
        run: |
          echo "AWS CLI version:"
          aws --version
          echo "Current AWS identity:"
          aws sts get-caller-identity
          echo "AWS region: $(aws configure get region)"

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # Log into Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push the Docker image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        run: |
          # Build the Docker image with latest tag and commit SHA
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/backend-repo"
          IMAGE_TAG="${GITHUB_SHA:0:8}"

          docker build -t $IMAGE_URI:$IMAGE_TAG -t $IMAGE_URI:latest ./ProjectWebApp
          docker push $IMAGE_URI:$IMAGE_TAG
          docker push $IMAGE_URI:latest

          echo "IMAGE_URI=$IMAGE_URI:$IMAGE_TAG" >> $GITHUB_ENV
          echo "Code has been pushed to ECR repository: $IMAGE_URI:$IMAGE_TAG"

      # Configure kubectl for EKS
      - name: Configure kubectl for EKS
        run: |
          echo "Configuring kubectl for EKS cluster: ${{ secrets.EKS_CLUSTER_NAME }}"
          echo "Using AWS region: ${{ secrets.AWS_REGION }}"
          
          # Verify AWS credentials are working
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          
          # Update kubeconfig
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }} --verbose
          
          # Debug kubectl config
          echo "Current kubectl context:"
          kubectl config current-context
          echo "Available contexts:"
          kubectl config get-contexts
          
          # Verify connection with detailed error output
          echo "Testing kubectl connection..."
          if ! kubectl get nodes; then
            echo "ERROR: Failed to connect to EKS cluster"
            echo "Debugging kubectl configuration..."
            kubectl config view --minify
            exit 1
          fi
          
          kubectl get namespaces

      # Create namespace if it doesn't exist
      - name: Create namespace
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl get namespace $EKS_NAMESPACE

      # Update deployment manifest with new image
      - name: Update deployment manifest
        run: |
          # Replace the placeholder with actual image URI
          sed -i "s|PLACEHOLDER_IMAGE_URI|$IMAGE_URI|g" k8s/deployment.yaml
          echo "Updated deployment manifest:"
          cat k8s/deployment.yaml

      # Deploy to EKS
      - name: Deploy to EKS
        run: |
          # Apply the deployment
          kubectl apply -f k8s/deployment.yaml

          # Wait for rollout to complete
          kubectl rollout status deployment/backend-repo -n $EKS_NAMESPACE --timeout=300s

          # Verify deployment
          kubectl get pods -n $EKS_NAMESPACE -l app=backend-repo
          kubectl get services -n $EKS_NAMESPACE

          echo "Deployment to EKS completed successfully!"
